# -*- coding: utf-8 -*-
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import json
import csv
import smtplib
from email.mime.text import MIMEText
from datetime import datetime
import easyocr
import re
from PIL import Image

API_TOKEN = "8482946212:AAETAUihHQRxFlc0CAzHGKRKZG3xWtgxHuY"
bot = telebot.TeleBot(API_TOKEN)

with open("rules.json", "r", encoding="utf-8") as f:
    rules = json.load(f)

user_states = {}
pending_services = {}
pending_order_ids = {}
user_phone_numbers = {}
pending_claim_texts = {}

def log_request(user_id, service_name, contact_type, timestamp):
    with open("requests_log.csv", mode="a", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow([user_id, service_name, contact_type, timestamp])


def get_service_by_keyword(lines):
    full_text = " ".join([re.sub(r'\s+', ' ', line.lower().strip()) for line in lines])
    for key, rule in rules.items():
        for alias in rule.get("aliases", []):
            if alias.lower() in full_text:
                return rule
    return None

def send_email(to_email, subject, message_body):
    from_email = "returno@ukr.net"
    from_password = "kLyEf84wfnWtVV1z"

    msg = MIMEText(message_body, "plain", "utf-8")
    msg["Subject"] = subject
    msg["From"] = from_email
    msg["To"] = to_email

    try:
        with smtplib.SMTP_SSL("smtp.ukr.net", 465) as server:
            server.login(from_email, from_password)
            server.send_message(msg)
        return True
    except Exception as e:
        print("‚ùå Email error:", e)
        return False

def extract_info_from_text(ocr_texts):
    order_id = ""
    phone = ""
    lines = []

    print("=== OCR —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ —Ç–µ–∫—Å—Ç ===")
    for (_, text, _) in ocr_texts:
        print(text)  # ‚úÖ –¢—É—Ç –ø–æ–±–∞—á–∏–º–æ, —á–∏ —î —Å–ª–æ–≤–∞ "–Ω–æ–≤–∞ –ø–æ—à—Ç–∞" —Ç–æ—â–æ
        lines.append(text)

        match_phone = re.search(r"\b(0\d{9})\b", text)
        if match_phone and not phone:
            phone = match_phone.group(1)

        match_order = re.search(r"\b\d{12,14}\b", text.replace(" ", ""))
        if match_order and not order_id:
            order_id = match_order.group(0)


    print("=== –°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤—ñ—Å ===")
    service = get_service_by_keyword(lines)
    print("–ó–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤—ñ—Å:", service['name'] if service else "‚ùå –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ")

    return service, order_id, phone

@bot.message_handler(content_types=["photo"])
def handle_photo(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    with open("received.jpg", 'wb') as f:
        f.write(downloaded_file)

    reader = easyocr.Reader(['uk', 'en'])
    results = reader.readtext("received.jpg")

    service, order_id, phone = extract_info_from_text(results)

    if not service:
        bot.reply_to(message, "‚ùóÔ∏è–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É.")
        return

    pending_services[user_id] = service
    pending_order_ids[user_id] = order_id
    user_phone_numbers[user_id] = phone
    user_states[user_id] = "processing_claim"
    process_claim(chat_id, user_id, phone)

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    user_states[user_id] = "waiting_service"

    bot.set_my_commands([
        telebot.types.BotCommand("start", "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"),
        telebot.types.BotCommand("help", "–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"),
        telebot.types.BotCommand("services", "–ü–µ—Ä–µ–ª—ñ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤")
    ])


    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üì∑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —á–µ–∫", callback_data="upload_photo"))
    kb.add(InlineKeyboardButton("üîç –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤—É —Å–µ—Ä–≤—ñ—Å—É", callback_data="manual_input"))
    
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø Returno –±–æ—Ç. –û–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ—á–∞—Ç–∫—É:",
        reply_markup=kb
    )


@bot.message_handler(commands=['services'])
def handle_services(message):
    service_list = [f"‚Ä¢ {v['name']}" for v in rules.values()]

    if not service_list:
        bot.send_message(message.chat.id, "‚ùóÔ∏è–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
    else:
        response = "üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:\n\n" + "\n".join(service_list)
        bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: not message.text.startswith("/"))
def handle_text(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(user_id)

    if text == "‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É":
        user_states[user_id] = "waiting_phone"
       # bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—Ä—É—á–Ω—É:")
        return


    if state == "waiting_service":
        service = get_service_by_keyword([text])

        if not service:
            bot.send_message(chat_id, "‚ùå –°–µ—Ä–≤—ñ—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É.")
            return
        pending_services[user_id] = service
        user_states[user_id] = "waiting_generate"
        refund_policy = service.get("refund_policy", "–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–ª—ñ—Ç–∏–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.")
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("üìÑ –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è", callback_data="generate_claim"))
        bot.send_message(chat_id, f"üìå –ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–ª—è {service['name']}:\n\n{refund_policy}", reply_markup=kb)

    elif state == "waiting_order_id":
        pending_order_ids[user_id] = text
        user_states[user_id] = "waiting_phone_choice"
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        kb.add(KeyboardButton("üì± –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º", request_contact=True))
        kb.add("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É", "‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")
        bot.send_message(chat_id, "üìû –Ø–∫ –∑—Ä—É—á–Ω—ñ—à–µ –Ω–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É?", reply_markup=kb)


    elif state == "waiting_phone":

        phone = text

        user_phone_numbers[user_id] = phone

        hide_kb = telebot.types.ReplyKeyboardRemove()

        bot.send_message(chat_id, "‚úÖ –ù–æ–º–µ—Ä –æ—Ç—Ä–∏–º–∞–Ω–æ.", reply_markup=hide_kb)

        if user_states.get(user_id) != "processing_claim":
            user_states[user_id] = "processing_claim"
            process_claim(chat_id, user_id, phone)

    else:
        bot.send_message(chat_id, "‚ùó –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")

@bot.message_handler(content_types=["contact"])
def handle_contact(message):
    user_id = message.from_user.id
    phone = message.contact.phone_number
    user_phone_numbers[user_id] = phone
    user_states[user_id] = "processing_claim"
    process_claim(message.chat.id, user_id, phone)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    data = call.data

    if call.data == "upload_photo":
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

        bot.send_message(chat_id, "üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞.")
        user_states[user_id] = "waiting_photo"

    elif call.data == "manual_input":
        # –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫–∏
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)

    elif data == "list_services":
        bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
        service_list = [f"‚Ä¢ {v['name']}" for k, v in rules.items()]
        bot.send_message(chat_id, "üìã –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏:\n\n" + "\n".join(service_list))

       # bot.send_message(chat_id, "üñä –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–µ—Ä–≤—ñ—Å—É.")
        # user_states[user_id] = "waiting_service"

    if data == "generate_claim":
        user_states[user_id] = "waiting_order_id"
        bot.send_message(chat_id, "üî¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")


    elif data == "enter_phone_manual":

        if user_states.get(user_id) != "waiting_phone":

            user_states[user_id] = "waiting_phone"

            bot.send_message(chat_id, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤—Ä—É—á–Ω—É:")

        else:

            bot.answer_callback_query(call.id, text="–í–∏ –≤–∂–µ –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É.")
    elif data == "skip_phone":
        user_states[user_id] = "processing_claim"
        process_claim(chat_id, user_id, phone="")

    elif data == "send_email":
        claim_text = pending_claim_texts.get(user_id)
        service = pending_services.get(user_id)
        contact_email = service.get("contact_email") if service else None

        if not claim_text or not contact_email:
            bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–º–∞—î –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–ø–æ—á–∞—Ç–∫—É.")
            return

        success = send_email(
            to_email=contact_email,
            subject=f"–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}",
            message_body=claim_text
        )
        # ‚õî –ü—Ä–∏–±—Ä–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ inline-–∫–Ω–æ–ø–∫–∏ (—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏)
        try:
            bot.edit_message_reply_markup(chat_id=chat_id, message_id=call.message.message_id, reply_markup=None)
        except Exception as e:
            print("‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–∏–±—Ä–∞—Ç–∏ –∫–Ω–æ–ø–∫–∏:", e)

        if success:
            bot.send_message(chat_id, "‚úÖ Email —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –∑ –±–æ—Ç–∞!")

            user_states.pop(user_id, None)
            pending_services.pop(user_id, None)
            pending_order_ids.pop(user_id, None)
            user_phone_numbers.pop(user_id, None)
            pending_claim_texts.pop(user_id, None)
        else:
            bot.send_message(chat_id, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ email.")

def process_claim(chat_id, user_id, phone):
    service = pending_services.get(user_id)
    order_id = pending_order_ids.get(user_id)

    if not service or not order_id:
        bot.send_message(chat_id, "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start —Å–ø–æ—á–∞—Ç–∫—É.")
        return

    service_name = service["name"]
    contact_type = service.get("contact_type")
    contact_url = service.get("contact_url")
    contact_email = service.get("contact_email")
    claim_template = service.get("claim_template", "–¢—É—Ç –±—É–¥–µ –≤–∞—à —à–∞–±–ª–æ–Ω –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è.")
    refund_policy = service.get("refund_policy", "–ù–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–ª—ñ—Ç–∏–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.")

    claim_text = claim_template.replace("{order_id}", order_id).replace("{phone}", phone)
    pending_claim_texts[user_id] = claim_text

    bot.send_message(chat_id, f"üìå *–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤ –¥–ª—è* _{service_name}_:\n\n{refund_policy}",
                     parse_mode="Markdown")
    bot.send_message(chat_id, f"üìù *–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–ª—è* _{service_name}_:\n\n{claim_text}", parse_mode="Markdown")

    kb = InlineKeyboardMarkup()
    if contact_email:
        kb.add(InlineKeyboardButton("üì§ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑ –±–æ—Ç–∞", callback_data="send_email"))
    if contact_url:
        kb.add(InlineKeyboardButton("üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–æ—Ä–º—É", url=contact_url))

    if kb.keyboard:
        bot.send_message(chat_id, "‚¨áÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:", reply_markup=kb)

    log_request(user_id, service_name, contact_type, datetime.now().isoformat())

    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω, —â–æ–± –Ω–µ –¥—É–±–ª—é–≤–∞—Ç–∏
    user_states[user_id] = "claim_sent"

if __name__ == "__main__":
    print("ü§ñ Returno –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ —á–µ–∫–∞—î –Ω–∞ –∫–æ–º–∞–Ω–¥–∏...")
    bot.infinity_polling()